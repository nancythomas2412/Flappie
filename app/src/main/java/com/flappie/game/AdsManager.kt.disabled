package com.flappie.game

import android.app.Activity
import android.content.Context
import android.util.Log
import android.view.View
import android.widget.LinearLayout
import com.google.android.gms.ads.*
import com.google.android.gms.ads.interstitial.InterstitialAd
import com.google.android.gms.ads.interstitial.InterstitialAdLoadCallback
import com.google.android.gms.ads.rewarded.RewardedAd
import com.google.android.gms.ads.rewarded.RewardedAdLoadCallback

/**
 * Manages Google AdMob ads with Firebase Remote Config control
 * Allows dynamic enabling/disabling of ads without app updates
 */
class AdsManager(
    private val context: Context,
    private val remoteConfigManager: RemoteConfigManager
) {

    // Test Ad Unit IDs (replace with real ones in production)
    private val BANNER_AD_ID = "ca-app-pub-3940256099942544/6300978111"        // Test banner
    private val INTERSTITIAL_AD_ID = "ca-app-pub-3940256099942544/1033173712"  // Test interstitial
    private val REWARDED_AD_ID = "ca-app-pub-3940256099942544/5224354917"      // Test rewarded

    // Production Ad Unit IDs (uncomment and set your real IDs)
    // private val BANNER_AD_ID = "ca-app-pub-YOUR_PUBLISHER_ID/YOUR_BANNER_ID"
    // private val INTERSTITIAL_AD_ID = "ca-app-pub-YOUR_PUBLISHER_ID/YOUR_INTERSTITIAL_ID"
    // private val REWARDED_AD_ID = "ca-app-pub-YOUR_PUBLISHER_ID/YOUR_REWARDED_ID"

    private var bannerAd: AdView? = null
    private var interstitialAd: InterstitialAd? = null
    private var rewardedAd: RewardedAd? = null

    private var gameOverCount = 0

    init {
        initializeAds()
    }

    private fun initializeAds() {
        // Initialize Mobile Ads SDK
        MobileAds.initialize(context) { initializationStatus ->
            Log.d("AdsManager", "AdMob initialized: ${initializationStatus.adapterStatusMap}")

            // Only load ads if enabled via remote config
            if (remoteConfigManager.isAdsEnabled()) {
                loadAds()
            }
        }
    }

    private fun loadAds() {
        if (remoteConfigManager.shouldShowBannerAds()) {
            loadBannerAd()
        }
        if (remoteConfigManager.shouldShowInterstitialAds()) {
            loadInterstitialAd()
        }
        if (remoteConfigManager.shouldShowRewardedAds()) {
            loadRewardedAd()
        }
    }

    // Banner Ad Methods
    private fun loadBannerAd() {
        bannerAd = AdView(context).apply {
            adUnitId = BANNER_AD_ID
            setAdSize(AdSize.BANNER)
            loadAd(AdRequest.Builder().build())
        }
    }

    fun showBannerAd(container: LinearLayout) {
        if (!remoteConfigManager.shouldShowBannerAds()) return

        bannerAd?.let { ad ->
            // Remove from previous parent if any
            (ad.parent as? LinearLayout)?.removeView(ad)

            container.addView(ad)
            ad.visibility = View.VISIBLE
        }
    }

    fun hideBannerAd() {
        bannerAd?.visibility = View.GONE
    }

    // Interstitial Ad Methods
    private fun loadInterstitialAd() {
        val adRequest = AdRequest.Builder().build()

        InterstitialAd.load(context, INTERSTITIAL_AD_ID, adRequest, object : InterstitialAdLoadCallback() {
            override fun onAdFailedToLoad(adError: LoadAdError) {
                Log.w("AdsManager", "Interstitial ad failed to load: ${adError.message}")
                interstitialAd = null
            }

            override fun onAdLoaded(ad: InterstitialAd) {
                Log.d("AdsManager", "Interstitial ad loaded successfully")
                interstitialAd = ad
                setupInterstitialCallbacks(ad)
            }
        })
    }

    private fun setupInterstitialCallbacks(ad: InterstitialAd) {
        ad.fullScreenContentCallback = object : FullScreenContentCallback() {
            override fun onAdClicked() {
                Log.d("AdsManager", "Interstitial ad clicked")
            }

            override fun onAdDismissedFullScreenContent() {
                Log.d("AdsManager", "Interstitial ad dismissed")
                interstitialAd = null
                // Load next ad
                if (remoteConfigManager.shouldShowInterstitialAds()) {
                    loadInterstitialAd()
                }
            }

            override fun onAdFailedToShowFullScreenContent(adError: AdError) {
                Log.w("AdsManager", "Interstitial ad failed to show: ${adError.message}")
                interstitialAd = null
            }

            override fun onAdImpression() {
                Log.d("AdsManager", "Interstitial ad recorded impression")
            }

            override fun onAdShowedFullScreenContent() {
                Log.d("AdsManager", "Interstitial ad showed fullscreen")
            }
        }
    }

    fun showInterstitialAd(activity: Activity) {
        if (!remoteConfigManager.shouldShowInterstitialAds()) return

        gameOverCount++
        val frequency = remoteConfigManager.getInterstitialFrequency()

        if (gameOverCount % frequency == 0) {
            interstitialAd?.show(activity) ?: run {
                Log.w("AdsManager", "Interstitial ad not ready")
                // Try to load for next time
                loadInterstitialAd()
            }
        }
    }

    // Rewarded Ad Methods
    private fun loadRewardedAd() {
        val adRequest = AdRequest.Builder().build()

        RewardedAd.load(context, REWARDED_AD_ID, adRequest, object : RewardedAdLoadCallback() {
            override fun onAdFailedToLoad(adError: LoadAdError) {
                Log.w("AdsManager", "Rewarded ad failed to load: ${adError.message}")
                rewardedAd = null
            }

            override fun onAdLoaded(ad: RewardedAd) {
                Log.d("AdsManager", "Rewarded ad loaded successfully")
                rewardedAd = ad
            }
        })
    }

    fun showRewardedAd(activity: Activity, onRewarded: (Int) -> Unit) {
        if (!remoteConfigManager.shouldShowRewardedAds()) {
            // If ads disabled, give reward anyway for good UX
            val baseReward = 10
            onRewarded(baseReward)
            return
        }

        rewardedAd?.let { ad ->
            ad.fullScreenContentCallback = object : FullScreenContentCallback() {
                override fun onAdDismissedFullScreenContent() {
                    rewardedAd = null
                    loadRewardedAd() // Load next ad
                }

                override fun onAdFailedToShowFullScreenContent(adError: AdError) {
                    Log.w("AdsManager", "Rewarded ad failed to show: ${adError.message}")
                    rewardedAd = null
                    // Give reward anyway for good UX
                    val baseReward = 10
                    onRewarded(baseReward)
                }
            }

            ad.show(activity) { rewardItem ->
                val baseReward = rewardItem.amount
                val multiplier = remoteConfigManager.getRewardedCoinMultiplier()
                val finalReward = (baseReward * multiplier).toInt()

                Log.d("AdsManager", "User rewarded: $finalReward coins")
                onRewarded(finalReward)
            }
        } ?: run {
            Log.w("AdsManager", "Rewarded ad not ready")
            // Give small reward anyway
            val baseReward = 5
            onRewarded(baseReward)
            loadRewardedAd() // Try to load for next time
        }
    }

    fun isRewardedAdReady(): Boolean {
        return rewardedAd != null && remoteConfigManager.shouldShowRewardedAds()
    }

    // Management Methods
    fun refreshAdsConfiguration() {
        // Called when remote config is updated
        if (remoteConfigManager.isAdsEnabled()) {
            loadAds()
        } else {
            // Disable all ads
            hideBannerAd()
            interstitialAd = null
            rewardedAd = null
        }
    }

    fun pauseAds() {
        bannerAd?.pause()
    }

    fun resumeAds() {
        bannerAd?.resume()
    }

    fun destroyAds() {
        bannerAd?.destroy()
        bannerAd = null
        interstitialAd = null
        rewardedAd = null
    }
}